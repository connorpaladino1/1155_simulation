import torch
import torch.nn as nn
from torch.utils.data import DataLoader, Dataset
import numpy as np
import matplotlib.pyplot as plt

class TimeSeriesDataset(Dataset):
    def __init__(self, data, window_size):
        self.data = torch.tensor(data, dtype=torch.float32)  # [N, features]
        self.window_size = window_size

    def __len__(self):
        return len(self.data) - self.window_size

    def __getitem__(self, idx):
        # Return the sequence and the target value
        # Assuming the target is the next value following the sequence
        return self.data[idx:idx+self.window_size], self.data[idx+self.window_size]

class TemporalBlock(nn.Module):
    def __init__(self, n_inputs, n_outputs, kernel_size, stride, dilation, padding, dropout=0.2):
        super(TemporalBlock, self).__init__()
        self.conv1 = nn.Conv1d(n_inputs, n_outputs, kernel_size, stride=stride, padding=padding, dilation=dilation)
        self.chomp1 = nn.ReLU()
        self.dropout1 = nn.Dropout(dropout)
        self.conv2 = nn.Conv1d(n_outputs, n_outputs, kernel_size, stride=stride, padding=padding, dilation=dilation)
        self.chomp2 = nn.ReLU()
        self.dropout2 = nn.Dropout(dropout)
        self.relu = nn.ReLU()

    def forward(self, x):
        x = self.dropout1(self.chomp1(self.conv1(x)))
        x = self.dropout2(self.chomp2(self.conv2(x)))
        return self.relu(x)

class Temporal_Convolution_Network(nn.Module):
    def __init__(self, num_channels=[32, 64], kernel_size=2, dropout=0.2):
        super(Temporal_Convolution_Network, self).__init__()
        layers = []
        num_levels = len(num_channels)
        # Start with 2 input channels
        in_channels = 2  # Assuming your data has 2 features per timestep
        for i in range(num_levels):
            dilation_size = 2 ** i
            out_channels = num_channels[i]
            layers.append(TemporalBlock(in_channels, out_channels, kernel_size, stride=1, dilation=dilation_size,
                                        padding=(kernel_size-1) * dilation_size, dropout=dropout))
            in_channels = out_channels  # Update in_channels for next layer
        self.network = nn.Sequential(*layers)
        self.linear = nn.Linear(num_channels[-1], 1)  # Output layer

    def forward(self, x):
        x = self.network(x)
        # Aggregate over the sequence length dimension if necessary
        x = torch.mean(x, dim=2)
        return self.linear(x)
    
def detect_anomalies(predictions, alpha=1.5):
    # Calculate mean and standard deviation of the predictions
    mean = predictions.mean()
    std = predictions.std()
    # Define threshold as mean plus alpha times the standard deviation
    threshold = mean + alpha * std
    # Identify anomalies
    anomalies = predictions > threshold
    return anomalies

# Sample data loading and model training/testing logic
data = np.array(eval("[[9.02,8.59],[9.66,7.54],[1.39,3.18],[9.08,8.02],[2.24,1.58],[1.48,4.37],[6.99,9.14],[1.22,4.50],[2.55,3.19],[8.92,7.33],[3.24,2.49],[6.01,8.37],[8.70,8.39],[7.20,9.64],[8.06,6.02],[8.52,8.65],[2.08,1.65],[7.42,6.99],[8.24,10.60],[3.61,3.76],[4.04,2.49],[2.12,1.62],[2.35,1.92],[10.16,7.39],[8.05,8.04],[3.05,2.35],[4.59,1.76],[9.32,7.88],[7.92,7.88],[9.53,9.22],[3.08,4.07],[9.61,9.31],[2.56,3.13],[7.83,7.55],[3.82,3.07],[8.08,6.72],[2.55,3.62],[2.64,4.16],[8.51,7.47],[1.30,2.94],[9.22,8.58],[7.81,7.87],[9.47,7.79],[2.90,3.28],[3.48,3.33],[2.01,2.43],[7.35,7.52],[3.71,3.44],[9.32,8.20],[3.72,1.87],[4.48,2.48],[2.92,3.34],[3.59,4.11],[2.91,4.44],[3.75,3.61],[8.04,9.70],[8.40,7.98],[2.81,2.56],[3.24,2.44],[3.17,3.49],[7.68,10.08],[7.36,8.93],[6.60,9.75],[3.62,3.63],[2.85,3.59],[3.02,3.50],[3.37,2.06],[3.36,4.54],[8.22,9.36],[8.62,10.06],[2.82,2.20],[9.00,7.51],[8.95,8.29],[8.71,8.23],[2.66,2.20],[4.55,2.00],[2.28,3.68],[3.26,3.98],[7.89,8.45],[8.13,9.94],[4.85,1.93],[3.20,2.86],[4.14,3.75],[7.85,8.13],[2.83,3.15],[9.09,8.10],[1.55,1.59],[2.38,3.03],[3.36,2.35],[9.08,7.96],[1.33,3.54],[7.86,8.95],[1.94,3.47],[6.44,7.57],[3.74,3.17],[2.00,2.72],[3.37,2.40],[1.31,4.53],[8.19,7.69],[4.44,1.56],[3.03,3.03],[2.89,4.24],[3.44,2.50],[9.06,8.22],[9.30,7.98],[6.23,9.26],[7.79,7.15],[2.93,1.34],[3.07,2.52],[2.30,3.21],[6.58,9.50],[3.10,2.54],[9.19,8.72],[3.44,3.77],[10.64,6.50],[7.84,8.67],[9.02,10.44],[6.80,8.44],[1.16,1.72],[3.34,2.58],[2.44,3.38],[4.47,2.77],[8.33,8.83],[9.15,6.26],[2.36,2.47],[3.82,1.78],[6.38,9.16],[9.09,8.47],[3.13,2.32],[2.75,1.75],[3.50,2.02],[8.78,7.45],[2.79,2.51],[8.95,6.52],[2.27,2.75],[2.45,3.63],[1.08,2.97],[3.58,2.64],[8.19,9.00],[2.96,4.56],[6.94,8.43],[9.53,8.51],[3.32,2.17],[3.84,2.35],[3.92,2.82],[3.95,3.65],[8.46,7.32],[2.89,1.96],[8.32,9.34],[10.09,7.86],[2.34,3.85],[10.07,7.08],[4.38,3.65],[2.07,2.94],[2.32,3.23],[5.06,4.76],[3.11,3.73],[1.41,2.40],[8.49,8.26],[9.88,9.54],[2.35,3.05],[4.64,2.75],[3.47,2.93],[7.53,8.35],[9.63,6.85],[7.68,7.20],[8.71,7.56],[0.96,1.99],[8.63,9.11],[3.79,2.09],[7.68,8.42],[2.93,4.00],[3.29,5.46],[7.35,6.17],[2.51,3.08],[8.32,7.85],[1.64,3.75],[3.43,3.21],[1.92,3.62],[2.98,4.19],[2.48,3.22],[9.13,7.95],[8.21,7.25],[8.39,10.49],[1.37,3.05],[2.21,2.89],[6.71,9.16],[3.02,4.68],[1.93,3.48],[8.60,8.70],[2.99,4.48],[8.07,9.16],[2.42,3.12],[8.37,9.84],[7.36,8.43],[7.37,8.40],[7.00,7.50],[1.66,2.08],[7.01,5.85],[2.58,2.72],[5.12,4.03],[3.65,2.90],[1.99,1.79],[7.87,6.12],[3.64,4.33],[9.73,10.23],[8.30,7.25],[4.20,1.48],[3.28,2.38],[5.86,11.14],[3.31,4.48],[1.13,2.65],[3.20,2.02],[7.83,8.28],[3.57,4.14],[3.10,3.97],[2.42,3.76],[0.93,2.91],[8.40,8.65],[7.92,8.45],[9.19,10.59],[7.28,6.13],[5.50,10.29],[2.02,4.05],[8.66,9.17],[7.79,9.49],[7.76,7.63],[2.43,3.57],[8.33,8.19],[6.93,5.08],[8.54,7.10],[4.31,3.02],[3.09,2.84],[2.35,2.51],[8.38,7.97],[7.84,7.26],[7.39,9.83],[2.76,2.09],[3.57,3.45],[3.81,3.63],[8.96,10.21],[2.56,3.38],[2.76,2.63],[8.04,8.12],[4.45,3.20],[2.14,2.62],[8.54,7.63],[4.67,4.01],[2.10,3.49],[8.16,8.00],[8.61,6.95],[4.88,4.35],[9.73,8.44],[8.59,8.85],[7.23,8.41],[2.37,4.81],[2.00,2.23],[8.14,6.23],[1.47,4.28],[7.22,8.65],[7.89,7.10],[2.68,3.76],[1.59,2.22],[8.38,8.43],[1.67,3.20],[8.70,8.96],[3.83,0.79],[7.44,7.79],[7.97,7.07],[2.75,4.50],[7.82,11.19],[7.31,10.25],[2.97,3.23],[0.35,4.09],[3.33,2.25],[3.17,3.39],[7.74,7.80],[3.23,4.31],[9.61,8.90],[8.74,8.62],[4.63,1.62],[9.00,5.10],[3.62,1.43],[9.64,9.01],[2.54,2.53],[7.26,6.68],[2.55,4.45],[9.33,8.56],[4.40,1.60],[7.44,8.18],[1.44,3.61],[9.23,6.79],[8.98,8.50],[2.16,2.69],[6.47,9.26],[3.02,3.35],[2.73,2.02],[7.45,8.09],[7.83,7.53],[6.95,8.54],[7.77,7.04],[7.40,8.47],[3.71,2.44],[7.81,8.22],[9.30,9.56],[2.51,4.04],[1.68,4.83],[7.56,7.89],[7.61,7.08],[8.32,7.75],[6.43,6.87],[9.22,9.52],[7.53,7.99],[7.09,7.35],[3.06,5.46],[8.03,7.99],[3.21,1.75],[3.07,2.61],[3.59,2.69],[8.02,7.27],[3.38,3.61],[8.35,8.49],[2.53,4.09],[9.20,7.34],[9.09,8.61],[1.55,0.80],[7.06,9.09],[4.55,4.80],[8.08,6.00],[7.98,7.70],[3.24,1.09],[5.57,3.06],[10.01,8.14],[8.55,8.01],[3.65,4.52],[2.17,2.44],[2.15,1.49],[3.36,2.31],[3.01,4.45],[8.92,6.43],[1.81,3.66],[1.93,2.86],[7.02,7.78],[1.71,1.70],[6.08,4.12],[7.36,9.03],[4.25,0.93],[8.52,7.43],[7.29,6.49],[8.07,8.85],[2.76,3.35],[3.17,2.82],[9.30,6.34],[8.06,8.53],[8.64,6.86],[9.10,9.96],[2.17,3.47],[4.01,2.42],[3.24,3.77],[7.75,7.16],[3.29,2.29],[2.19,2.50],[8.44,9.19],[1.48,2.52],[6.31,7.90],[8.10,7.94],[7.71,6.44],[8.65,6.42],[7.75,9.61],[7.27,7.19],[0.88,2.47],[6.91,7.59],[8.23,6.44],[9.73,7.60],[9.68,7.54],[3.25,3.35],[7.06,7.86],[3.59,5.19],[7.95,8.29],[1.98,3.71],[7.40,8.32],[5.45,3.13],[3.94,4.27],[2.34,3.57],[3.81,1.77],[7.01,8.94],[3.26,3.78],[5.30,8.68],[3.93,4.91],[6.12,8.12],[7.26,9.24],[1.74,3.92],[3.08,2.32],[6.86,7.81],[3.50,2.86],[6.50,8.76],[3.68,4.85],[7.39,7.96],[8.61,6.98],[8.03,7.25],[3.34,4.88],[10.17,7.82],[4.15,2.30],[2.03,3.79],[3.63,5.27],[1.58,2.58],[2.73,3.72],[2.16,2.40],[8.56,7.70],[2.75,2.32],[7.93,8.49],[7.46,7.91],[7.82,9.37],[7.81,9.13],[2.98,3.12],[7.51,6.88],[2.61,1.54],[8.92,8.35],[9.29,8.67],[7.64,7.16],[7.77,8.37],[7.68,7.75],[1.99,3.31],[6.98,8.06],[9.59,7.15],[7.35,7.20],[1.89,1.80],[3.01,3.05],[2.38,2.44],[3.33,2.78],[8.54,9.07],[7.91,10.58],[8.08,6.54],[8.18,7.63],[3.48,3.22],[3.65,4.37],[7.90,8.02],[2.40,4.85],[8.77,9.23],[8.18,6.70],[3.19,2.24],[2.30,2.67],[3.49,3.18],[5.56,2.90],[3.10,2.23],[3.71,1.88],[3.66,5.01],[2.48,4.41],[7.86,6.78],[6.83,6.20],[3.34,3.46],[5.19,2.19],[6.91,9.41],[3.65,2.94],[2.01,2.87],[8.12,8.55],[7.55,9.28],[8.71,8.96],[2.96,1.57],[3.58,3.31],[3.98,2.79],[0.38,3.82],[6.81,8.31],[9.00,7.57],[8.77,5.15],[2.48,3.49],[2.98,2.71],[2.97,4.77],[7.78,7.65],[2.75,3.97],[2.84,2.57],[2.75,2.25],[8.08,7.90],[1.62,2.06],[7.87,8.01],[3.98,2.85],[8.02,9.41],[7.47,8.59],[7.33,8.28],[7.17,8.09],[9.49,7.73],[8.09,9.48],[1.96,2.81],[8.74,7.72],[2.17,2.68],[1.99,1.35],[7.25,7.72],[2.41,2.14],[2.48,4.05],[2.22,2.68],[2.46,2.22],[2.51,2.57],[8.58,8.33],[8.91,7.20],[3.52,4.53],[8.22,8.93],[2.39,2.61],[7.42,5.41],[6.02,8.75],[2.75,2.73],[4.58,3.77],[1.42,3.76],[7.78,7.72],[2.54,4.06],[1.75,4.44],[3.20,3.71],[4.16,3.79],[3.87,3.18],[4.07,4.17],[3.09,1.01],[4.20,2.59],[3.39,2.58],[3.41,1.30],[8.06,8.27],[3.84,1.87],[2.95,3.24],[9.05,7.46],[4.50,3.88],[3.69,1.39],[2.41,3.85],[4.03,3.47],[3.38,2.97],[8.47,7.96],[2.96,3.68],[3.82,4.90],[-0.24,1.98],[3.13,2.30],[4.26,2.11],[8.73,8.05],[7.21,6.67],[7.81,8.99],[6.52,8.18],[2.23,2.76],[7.97,8.28],[3.87,2.67],[2.12,3.15],[3.27,2.95],[7.98,8.55],[7.83,9.71],[9.11,7.88],[2.24,3.15],[3.52,6.85],[2.78,3.36],[3.06,4.09],[3.64,1.34],[8.87,8.50],[9.54,10.01],[2.81,3.30],[3.06,1.92],[0.30,2.95],[4.16,2.18],[3.63,2.14],[2.27,3.22],[7.28,8.89],[7.63,9.09],[3.11,3.15],[3.22,2.52],[2.73,1.89],[4.27,2.29],[4.80,3.64],[7.93,7.96],[8.55,7.03],[8.97,8.43],[3.26,2.10],[8.29,8.26],[8.12,9.62],[6.93,8.24],[3.33,1.75],[3.55,2.80],[7.39,7.70],[8.64,8.50],[8.27,7.66],[3.41,2.44],[9.51,8.63],[3.05,2.17],[7.18,8.00],[7.98,10.14],[8.73,7.92],[7.87,8.81],[7.88,8.42],[7.90,7.83],[7.12,7.17],[2.11,2.18],[6.81,8.14],[4.45,3.96],[3.09,2.70],[2.36,4.19],[2.78,3.03],[2.30,1.59],[2.92,4.12],[1.28,2.44],[7.45,8.39],[7.46,8.81],[9.67,8.42],[3.08,2.14],[8.31,7.61],[4.69,3.88],[0.53,2.20],[9.90,7.94],[4.77,3.40],[9.20,7.84],[7.78,7.35],[8.13,7.85],[6.59,7.92],[2.21,3.47],[3.21,1.04],[5.64,6.99],[8.13,7.57],[2.46,3.40],[3.20,2.40],[2.97,2.46],[6.91,7.68],[6.58,6.24],[8.20,9.05],[8.96,9.62],[8.98,7.68],[3.53,4.44],[6.61,6.35],[7.98,8.58],[7.10,8.32],[3.01,2.77],[2.29,3.11],[7.33,9.04],[3.10,3.60],[8.57,9.63],[7.57,7.31],[3.00,1.84],[6.95,6.93],[8.22,9.05],[2.78,3.71],[7.52,9.57],[8.44,8.90],[1.70,3.67],[3.87,4.36],[7.01,6.90],[8.48,7.15],[8.79,6.25],[6.41,8.44],[6.90,6.56],[7.38,8.19],[9.64,8.74],[3.19,3.05],[7.00,8.30],[4.17,3.25],[3.50,3.87],[8.66,8.19],[2.40,2.71],[1.88,3.38],[6.77,8.50],[4.52,3.54],[8.70,7.67],[3.31,1.29],[8.11,6.67],[2.53,3.54],[1.39,3.20],[8.46,10.17],[3.68,2.69],[10.40,7.94],[9.19,6.77],[8.20,9.15],[1.82,0.96],[8.73,8.52],[7.35,9.78],[5.58,8.88],[3.79,3.43],[7.74,9.60],[2.08,4.55],[2.64,2.94],[10.06,6.90],[4.07,1.97],[2.93,1.79],[1.89,4.75],[3.76,2.08],[10.08,7.31],[3.83,3.46],[3.34,1.24],[3.32,2.61],[6.20,7.46],[1.65,3.74],[1.29,4.35],[2.03,2.95],[2.74,5.72],[7.70,9.38],[7.97,9.17],[7.91,7.63],[3.34,2.59],[9.62,7.68],[5.13,1.05],[8.86,7.42],[3.29,3.33],[7.71,9.25],[6.90,5.85],[6.42,8.90],[3.56,4.08],[7.52,7.05],[8.12,8.54],[7.74,6.33],[8.41,7.76],[8.67,9.90],[2.53,2.35],[4.87,3.47],[7.87,8.08],[7.97,7.79],[2.94,3.96],[7.16,10.15],[6.86,8.11],[2.55,0.58],[3.95,2.42],[7.44,6.63],[6.16,8.51],[8.95,8.51],[2.04,3.69],[7.98,7.61],[9.00,7.33],[8.90,8.64],[2.49,1.94],[2.43,2.45],[9.27,7.13],[3.25,4.58],[3.28,1.87],[7.35,6.78],[2.47,2.21],[7.99,8.84],[9.39,7.75],[3.52,2.27],[7.38,9.91],[8.49,8.73],[8.11,6.56],[7.52,8.15],[9.21,8.14],[6.77,6.54],[3.26,2.93],[3.81,4.36],[6.79,8.60],[9.40,8.92],[9.20,7.39],[3.18,1.66],[4.63,1.57],[5.83,8.85],[8.95,9.71],[9.67,8.39],[7.00,7.32],[6.65,7.03],[8.12,7.03],[8.74,8.30],[8.17,9.32],[7.87,7.03],[7.30,7.34],[3.52,3.51],[4.57,2.93],[6.63,6.39],[2.78,4.10],[0.97,3.19],[2.45,1.80],[7.97,7.12],[2.05,5.63],[7.11,7.56],[3.27,3.89],[2.18,3.24],[7.65,7.65],[6.82,9.19],[2.89,3.40],[2.99,1.94],[8.04,7.85],[7.53,7.89],[3.63,3.97],[6.63,7.78],[2.02,3.46],[1.92,4.05],[6.83,5.13],[4.08,4.05],[8.54,8.76],[8.07,8.52],[8.15,8.36],[8.76,8.28],[7.39,8.36],[3.92,3.33],[9.17,8.37],[8.27,8.32],[4.89,3.17],[5.14,3.63],[3.30,3.26],[6.32,7.19],[9.48,9.38],[10.06,6.93],[8.59,7.53],[1.60,3.56],[8.84,8.55],[3.21,2.90],[3.10,2.50],[2.97,4.79],[2.55,1.11],[8.19,7.65],[3.90,3.31],[4.85,4.13],[4.03,3.93],[2.77,2.77],[3.58,2.80],[2.24,1.20],[8.16,6.97],[8.57,6.24],[7.40,9.37],[10.06,9.21],[2.53,3.23],[7.62,7.80],[9.87,9.08],[3.61,3.19],[2.99,2.10],[3.01,2.98],[8.92,7.71],[8.56,8.09],[7.69,8.78],[3.06,1.86],[3.27,1.72],[8.72,7.63],[4.18,3.07],[8.28,7.74],[3.65,5.16],[2.72,0.70],[2.01,3.50],[7.53,6.41],[8.01,6.69],[3.21,0.96],[3.41,4.88],[8.80,8.75],[9.11,6.96],[9.50,8.85],[2.23,1.76],[8.06,7.35],[7.54,8.20],[7.57,9.15],[3.18,3.25],[7.83,7.24],[8.40,7.35],[7.19,8.42],[6.96,6.03],[6.76,7.31],[8.43,8.69],[3.20,1.48],[8.80,6.38],[6.44,7.47],[7.83,8.88],[7.95,8.48],[3.36,3.56],[8.25,8.47],[2.47,2.42],[9.24,8.02],[9.03,9.13],[2.28,2.79],[7.21,7.38],[8.75,8.38],[8.34,7.70],[4.50,3.07],[5.85,7.28],[7.63,8.18],[3.94,2.48],[2.95,3.67],[8.68,7.51],[7.76,8.96],[8.03,7.23],[4.18,2.53],[3.86,2.84],[8.59,5.06],[3.11,3.66],[7.04,8.42],[6.20,6.42],[8.63,8.41],[3.03,4.28],[4.42,2.43],[5.45,8.93],[4.16,3.01],[6.93,7.69],[9.68,7.45],[7.36,6.68],[8.17,6.59],[7.33,8.99],[8.15,7.66],[3.83,3.81],[5.88,7.39],[2.77,3.70],[2.93,3.62],[7.73,7.11],[7.67,7.60],[3.28,3.83],[1.78,3.71],[4.55,3.12],[2.54,2.15],[9.31,9.40],[2.55,3.86],[8.79,6.75],[4.28,2.41],[8.51,7.74],[2.87,2.04],[5.53,2.47],[8.18,9.39],[9.11,9.19],[8.31,8.82],[7.07,8.24],[9.19,8.71],[10.32,8.39],[1.72,4.75],[6.98,9.85],[8.51,8.18],[5.47,7.71],[8.56,8.08],[3.07,1.58],[2.44,4.88],[7.90,7.80],[1.72,3.87],[2.97,1.83],[3.12,3.51],[3.10,3.75],[9.00,7.24],[3.33,3.98],[2.88,2.70],[8.87,6.65],[4.03,1.51],[6.77,7.41],[8.51,9.37],[5.30,2.64],[2.98,2.00],[1.85,3.38],[8.08,6.40],[3.32,2.87],[7.39,7.81],[8.30,7.25],[8.32,8.42],[2.69,3.22],[2.32,4.80],[2.09,1.59],[1.76,1.68],[3.82,3.51],[9.03,8.24],[1.52,2.28],[3.69,2.60],[2.66,2.63],[2.52,2.81],[8.31,9.70],[3.29,5.08],[4.59,2.49],[8.29,6.64],[2.84,3.40],[2.57,2.69],[7.64,6.88],[7.98,7.25],[1.62,2.27],[7.61,8.17],[2.89,2.78],[8.17,8.44],[2.66,4.67],[8.88,7.92],[7.94,8.33],[4.96,3.04],[7.42,8.59],[7.29,7.94],[2.32,3.61],[9.61,8.45],[7.69,7.25],[8.54,7.08],[4.06,1.24],[8.27,8.51],[3.37,2.61],[3.83,2.14],[9.12,8.95],[9.74,8.20],[6.81,8.92],[5.31,1.13],[3.22,3.01],[2.46,3.11],[1.47,2.31],[4.21,2.18],[2.74,1.50],[7.37,8.86],[7.80,7.85],[7.97,8.82],[2.14,3.70],[7.45,10.56],[2.18,5.09],[2.39,1.59],[9.39,8.56],[6.89,7.79],[1.45,3.07],[7.45,7.33],[8.35,9.07],[1.80,2.67],[3.96,3.41],[7.83,8.02],[2.47,3.51],[1.52,4.14],[7.56,7.12],[8.62,7.63],[5.15,2.23],[7.79,7.01],[7.97,9.77],[9.38,8.56],[0.92,4.70],[3.52,3.30],[2.96,4.10],[7.03,6.62],[4.58,2.48]]"))

window_size = 20

# Instantiate the dataset
dataset = TimeSeriesDataset(data, window_size)

# Train/test split
train_size = int(0.8 * len(dataset))
test_size = len(dataset) - train_size
train_dataset, test_dataset = torch.utils.data.random_split(dataset, [train_size, test_size])

# DataLoader
train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=16, shuffle=False)

# Model instantiation
model = Temporal_Convolution_Network()
criterion = torch.nn.MSELoss()  # Change if your target is binary or categorical
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)

# Training loop
epochs = 100
for epoch in range(epochs):
    model.train()
    total_loss = 0
    for batch_data, batch_targets in train_loader:
        batch_data = batch_data.transpose(1, 2)  # Correct shape [batch, channels, sequence]
        optimizer.zero_grad()
        predictions = model(batch_data)
        loss = criterion(predictions, batch_targets)
        loss.backward()
        optimizer.step()
        total_loss += loss.item()
    print(f'Epoch {epoch+1}: Avg. Loss = {total_loss / len(train_loader)}')

# After training, obtain predictions and detect anomalies
model.eval()
all_predictions = []
for batch_data, batch_targets in test_loader:
    batch_data = batch_data.transpose(1, 2)  # Ensure the correct shape
    predictions = model(batch_data).squeeze()  # Squeeze to ensure dimension match
    all_predictions.extend(predictions.detach().numpy())

# Convert predictions to a tensor and detect anomalies
predictions_tensor = torch.tensor(all_predictions).squeeze()  # Ensure squeezing if necessary

alpha_values = [0.1, 0.2, 0.3]
for alpha in alpha_values:
    anomaly_flags = detect_anomalies(predictions_tensor, alpha=alpha)    
    num_anomalies = anomaly_flags.sum().item()
    print(f"Number of anomalies detected: {num_anomalies}")

# Visualization to display anomalies
plt.figure(figsize=(10, 5))
plt.plot(predictions_tensor.numpy(), label='Predicted Values')
anomaly_points = predictions_tensor.numpy()[anomaly_flags.numpy()]
plt.scatter(np.where(anomaly_flags)[0], anomaly_points, color='red', label='Anomalies')
plt.title('Anomaly Detection in Predictions')
plt.xlabel('Time Step')
plt.ylabel('Predicted Value')
plt.legend()
plt.savefig('C:/Users/Proto/Desktop/Neural Network/anomaly_graph.png')
plt.close()
